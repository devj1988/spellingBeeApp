{"version":3,"sources":["Cell.tsx","refresh-svgrepo-com.svg","UserControls.tsx","Grid.tsx","puzzles.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","polygonClass","this","props","isCenter","className","width","height","viewBox","onClick","handleClick","letter","points","stroke","x","y","React","Component","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","d","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref","svgRef","title","id","style","enableBackground","xmlSpace","ref","ForwardRef","forwardRef","UserControls","txt","isNewGame","currentWord","handleSubmit","handleJuggle","handleClear","Grid","center","sides","possibleWords","console","log","useState","setCurrentWord","wordsFound","setWordsFound","message","error","hidden","setMessage","sideLetters","setSideLetters","handleCellClick","cellArray","map","centerCell","top","_","bottom","find","word","push","concat","setTimeout","handleReset","puzzles","App","puzzleIndex","puzzle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1189c04c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./cell.css\";\r\n\r\nexport interface CellProps {\r\n    isCenter: boolean;\r\n    letter: string;\r\n    handleClick: (letter: string) => void;\r\n}\r\n\r\nexport class Cell extends React.Component<CellProps> {\r\n\r\n    render() {\r\n        const polygonClass = this.props.isCenter ? \"polygon-center\" : \"polygon-outer\";\r\n\r\n        return (\r\n            <div className=\"cell\" >\r\n                <svg width={104} height={104} viewBox=\"0 0 120 103.92304845413263\" onClick={() => { this.props.handleClick(this.props.letter) }}>\r\n                    <polygon points=\"0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263\"\r\n                        stroke=\"transparent\" className={polygonClass}></polygon>\r\n                    <text x=\"45%\" y=\"57%\" className=\"cell-text\">{this.props.letter}</text>\r\n                </svg></div>\r\n\r\n        );\r\n    }\r\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M304.302,209.419c-7.594-3.318-16.435,0.148-19.751,7.739c-20.766,47.527-67.69,78.236-119.546,78.236 c-41.106,0-79.108-19.32-103.445-51.003l51.23,10.19c8.126,1.617,16.021-3.661,17.638-11.786 c1.616-8.125-3.661-16.022-11.786-17.638l-84.004-16.709c-8.125-1.612-16.021,3.661-17.638,11.786L0.291,304.238 c-1.616,8.125,3.661,16.022,11.786,17.638c0.988,0.196,1.972,0.291,2.942,0.291c7.01,0,13.276-4.94,14.696-12.077l9.148-45.992 c29.972,38.123,76.202,61.296,126.142,61.296c63.78,0,121.496-37.77,147.036-96.225 C315.358,221.579,311.893,212.736,304.302,209.419z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M317.929,8.12c-8.125-1.614-16.022,3.661-17.638,11.786l-9.149,45.997C261.169,27.783,214.94,4.611,165.005,4.611 c-63.779,0-121.495,37.771-147.038,96.224c-3.317,7.591,0.148,16.434,7.739,19.751c1.956,0.854,3.993,1.259,5.999,1.259 c5.781,0,11.29-3.362,13.753-8.998c20.768-47.527,67.693-78.237,119.548-78.237c41.099,0,79.1,19.316,103.437,50.995 l-51.228-10.191c-8.127-1.615-16.022,3.66-17.639,11.785c-1.616,8.125,3.66,16.022,11.785,17.639l84.006,16.711 c0.971,0.193,1.951,0.288,2.927,0.288c2.945,0,5.849-0.868,8.333-2.528c3.308-2.21,5.602-5.644,6.378-9.546l16.709-84.006 C331.331,17.633,326.054,9.736,317.929,8.12z\"\n}));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref6 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref7 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref8 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref9 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref10 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref11 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref12 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref13 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref14 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref15 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref16 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref17 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar SvgRefreshSvgrepoCom = function SvgRefreshSvgrepoCom(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 330.006 330.006\",\n    style: {\n      enableBackground: \"new 0 0 330.006 330.006\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgRefreshSvgrepoCom, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/refresh-svgrepo-com.a4d29865.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport { ReactComponent as Refresh } from \"./refresh-svgrepo-com.svg\";\r\nimport \"./Grid.css\";\r\n\r\nexport interface UserControlProps {\r\n    handleSubmit: () => void;\r\n    handleJuggle: () => void;\r\n    handleClear: () => void;\r\n    handleReset: () => void;\r\n    currentWord: string;\r\n    isNewGame: boolean;\r\n}\r\n\r\nexport class UserControls extends React.Component<UserControlProps> {\r\n\r\n    render() {\r\n        const txt = !this.props.isNewGame ?\r\n            \"\" : this.props.currentWord || \"\";\r\n        return (\r\n            <div className=\"user-controls\">\r\n                <div className=\"user-controls-text\">{txt}</div>\r\n                <div className=\"button-row\">\r\n                    <button onClick={this.props.handleSubmit} className=\"common-btn\">Enter</button>\r\n                    <button onClick={this.props.handleJuggle} className=\"shuffle-btn\">\r\n                        <Refresh className=\"shuffle-svg\" />\r\n                    </button>\r\n                    <button onClick={this.props.handleClear} className=\"common-btn\">Clear</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport { Cell } from \"./Cell\";\r\nimport { UserControls } from \"./UserControls\";\r\nimport * as _ from \"lodash\";\r\nimport \"./Grid.css\";\r\n\r\nexport interface GridProps {\r\n    center: string;\r\n    sides: Array<string>;\r\n    possibleWords: Array<string>;\r\n}\r\n\r\nexport const Grid = ({ center, sides, possibleWords }: GridProps) => {\r\n\r\n    console.log({ center, sides, possibleWords });\r\n\r\n    const [currentWord, setCurrentWord] = useState(\"\");\r\n    const [wordsFound, setWordsFound] = useState<Array<string>>([]);\r\n    const [message, setMessage] = useState({\r\n        message: \"\",\r\n        error: false,\r\n        hidden: true\r\n    });\r\n    const [sideLetters, setSideLetters] = useState<Array<string>>(sides);\r\n\r\n    const handleCellClick = (letter: string) => {\r\n        setCurrentWord(currentWord + letter);\r\n        console.log(currentWord + letter);\r\n    }\r\n\r\n    const clearCurrentWord = () => {\r\n        setCurrentWord(\"\");\r\n    }\r\n\r\n    const submit = () => {\r\n        const validWord = possibleWords.find(word => word === currentWord);\r\n        if (!validWord) {\r\n            const message = currentWord.length < 4 ? \"Word should be at least 4 letters long\"\r\n                : `${currentWord} was not found in the dictionary`\r\n            setMessage({\r\n                message,\r\n                error: true,\r\n                hidden: false\r\n            });\r\n        } else if (currentWord in wordsFound) {\r\n            setMessage({\r\n                message: `${currentWord} is already added :(`,\r\n                error: true,\r\n                hidden: false\r\n            });\r\n        } else {\r\n            const newList: Array<string> = [...wordsFound];\r\n            newList.push(currentWord);\r\n            setWordsFound(wordsFound.concat(currentWord));\r\n            if (wordsFound.length + 1 < possibleWords.length) {\r\n                setMessage({\r\n                    message: `${currentWord} is valid, yay!`,\r\n                    error: false,\r\n                    hidden: false\r\n                });\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            setMessage({\r\n                ...message,\r\n                hidden: true\r\n            });\r\n        }, 2000);\r\n        setCurrentWord(\"\");\r\n    }\r\n\r\n    const juggle = () => {\r\n        setSideLetters(_.shuffle(sides));\r\n    }\r\n\r\n    const resetGame = () => {\r\n        setWordsFound([]);\r\n        setCurrentWord(\"\");\r\n        setMessage({\r\n            ...message,\r\n            hidden: true\r\n        });\r\n    }\r\n\r\n    const cellArray = sideLetters.map((letter: string, i: number) =>\r\n        <Cell key={i}\r\n            letter={letter}\r\n            isCenter={false}\r\n            handleClick={handleCellClick}></Cell>);\r\n    const centerCell = <Cell key={7}\r\n        letter={center}\r\n        isCenter={true}\r\n        handleClick={handleCellClick}></Cell>;\r\n    const top = _.slice(cellArray, 0, 2);\r\n    const bottom = _.slice(cellArray, -4);\r\n\r\n    return (\r\n        <div className=\"grid\">\r\n            <div hidden={message.hidden} className={message.error ? \"message-error\" : \"message\"}>\r\n                {message.message}\r\n            </div>\r\n\r\n            <div className=\"grid-body\">\r\n                <div className=\"grid-left\">\r\n                    <div className=\"hive\">\r\n                        {top}\r\n                        {centerCell}\r\n                        {bottom}\r\n                    </div>\r\n                    <UserControls handleSubmit={submit}\r\n                        handleJuggle={juggle}\r\n                        handleClear={clearCurrentWord}\r\n                        currentWord={currentWord}\r\n                        handleReset={resetGame}\r\n                        isNewGame={!(wordsFound.length === possibleWords.length)}\r\n                    ></UserControls>\r\n                </div>\r\n                <div className=\"grid-right\">\r\n                    <div className=\"wordlist\">\r\n                        <div className={wordsFound.length === possibleWords.length ? \"wordlist-header wordlist-header-green\" :\r\n                            \"wordlist-header wordlist-header-white\"\r\n                        }>\r\n                            {wordsFound.length > 0 ?\r\n                                wordsFound.length === possibleWords.length ?\r\n                                    \"You found all words\"! :\r\n                                    `${wordsFound.length} word${\r\n                                    wordsFound.length > 1 ? \"s\" : \"\"\r\n                                    } found` : \"\"}\r\n                        </div>\r\n                        <ol className=\"wordsFoundList\">\r\n                            {wordsFound.map(word => <li>{word}</li>)}\r\n                        </ol>\r\n                    </div></div>\r\n            </div>\r\n        </div>);\r\n}","export const puzzles = {\r\n    puzzles: [\r\n        {\r\n            center: \"O\",\r\n            sides: [\"P\", \"A\", \"E\", \"B\", \"T\", \"L\"],\r\n            possibleWords: [\"PLOT\", \"BOTTLE\", \"BLOT\", \"BOLT\"]\r\n        },\r\n        {\r\n            center: \"T\",\r\n            sides: [\"A\", \"B\", \"L\", \"E\", \"R\", \"L\"],\r\n            possibleWords: [\"TABLE\", \"TABLET\", \"BATTLE\"]\r\n        }\r\n    ]\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Grid } from './Grid';\r\nimport { puzzles } from \"./puzzles\";\r\nimport * as _ from \"lodash\";\r\n\r\nfunction App() {\r\n    const puzzleIndex = _.random(0, puzzles.puzzles.length - 1);\r\n    const puzzle = puzzles.puzzles[puzzleIndex];\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <header className=\"App-header\">\r\n                    <p>\r\n                        Like the NYTimes Spelling Bee.\r\n                    </p>\r\n                    <div>\r\n                        <div>Enter all words you can make using these letters.</div>\r\n                        <div>Each word should include the letter in the yellow cell.</div>\r\n                        <div>Words should be at least 4 letters long. </div>\r\n                        <div>Letter repetitions are allowed.</div>\r\n                        <p></p>\r\n                        <div>Enter a word by clicking on the cells, then clicking enter.</div>\r\n                        <div>The middle button shuffles the outer letters.</div>\r\n                        <p />\r\n                    </div>\r\n                </header>\r\n            </div>\r\n            <div>\r\n                <Grid {...puzzle} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}